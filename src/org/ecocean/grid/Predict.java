/**
   This class provides static methods for evaluating a jboost-trained
   classifier on new data.  This part of the code can stand by itself.

   In addition, this class includes a main which, when run, reads data
   from standard input of the same form as that used during training,
   and outputs corresponding predictions to standard output.  This
   part of the code requires other jboost classes.

   This classifier was automatically generated by jboost on
   Fri Nov 20 02:27:51 EST 2009.
**/

package org.ecocean.grid;
/**
This class provides static methods for evaluating a jboost-trained
classifier on new data.  This part of the code can stand by itself.

In addition, this class includes a main which, when run, reads data
from standard input of the same form as that used during training,
and outputs corresponding predictions to standard output.  This
part of the code requires other jboost classes.

This classifier was automatically generated by jboost on
Sun Nov 29 19:08:31 EST 2009.
**/

import java.util.*;

public class Predict{

	  /**
	     Evaluates this classifier on an example represented by an array
	     of Objects and returns an array of scores, one for each class.
	     Finite attributes must be represented by an Integer specifying
	     the index of the chosen value.  Text attributes are given by a
	     String.  Number attributes are represented by a Double.  In all
	     cases, an undefined attribute is indicated by a null pointer.
	     @param at an array of Objects corresponding to the attributes
	                   specified in the spec file on which this classifier
			   was trained.  Specifically, these objects are:
	<pre>
	  *      index    attr.type    data.type   name
	  *    ------------------------------------------
	  *         0     finite       Integer      sex
	  *                 key:     0 = male
	  *                          1 = female
	  *                          2 = unsure
	  *         1     text         String       locationCodeOne
	  *         2     text         String       locationCodeTwo
	  *         3     number       Double       i3s
	  *         4     number       Double       grothPoints
	  *         5     number       Double       grothFractionMatchedTriangles
	  *         6     number       Double       grothLogMStdDev
	  *         7     number       Double       timeDiffYears
	  *         8     number       Double       numCommonKeywords
	  *         9     finite       Integer      sizeDiff
	  *                 key:     0 = unknown
	  *                          1 = small
	  *                          2 = large
	</pre>
	     @return an array of scores correpsonding to the classes:
	<pre>
	  *           index       class name
	  *          ------------------------
	  *              0        match
	  *              1        not
	</pre>
	  **/
	  static public double[] predict(Object[] at) {
	    attr = at;
	    int i,j,a,n;
	    StringTokenizer st;
	    String s;
	    Object v;
	    Enumeration e;
	    for (i = 0; i < num_text_attr; i++) {
	      a = text_attr[i];
	      if (!defined_attr(a))
	        continue;
	      Arrays.fill(tokens[a], false);
	      try {
	        s = (String) attr[a];
	      }
	      catch (ClassCastException ex) {
	        throw new IllegalArgumentException
	          ("Expected attribute " + a + " to be of type String");
	      }
	      st = new StringTokenizer(s);
	      n = st.countTokens();
	      String[] words = new String[n];
	      for (j = 0; j < n; j++)
	        words[j] = st.nextToken();
	      for (j = 0; j < text_patterns[i].length; j++) {
	        setPattern(words, text_patterns[i][j]);
	        while(moreTokens())
	          if ((v = hash.get(nextToken())) != null)
	            tokens[a][((Integer) v).intValue()] = true;
	      }
	    }
	    return predict_int();
	  }

	  /**
	     Evaluates this classifier on an example represented by an array
	     of Strings and returns an array of scores, one for each class.
	     These Strings represent the values of the attributes similar
	     to their representation in a data file.  Null pointers can be
	     passed for undefined attributes.

	     @param at an array of Objects corresponding to the attributes
	                   specified in the spec file on which this classifier
			   was trained.  Specifically, these objects are:
	<pre>
	  *      index    attr.type    name
	  *    ------------------------------------------
	  *         0     finite       sex
	  *                 values: male
	  *                         female
	  *                         unsure
	  *         1     text         locationCodeOne
	  *         2     text         locationCodeTwo
	  *         3     number       i3s
	  *         4     number       grothPoints
	  *         5     number       grothFractionMatchedTriangles
	  *         6     number       grothLogMStdDev
	  *         7     number       timeDiffYears
	  *         8     number       numCommonKeywords
	  *         9     finite       sizeDiff
	  *                 values: unknown
	  *                         small
	  *                         large
	</pre>
	     @return an array of scores correpsonding to the classes:
	<pre>
	  *           index       class name
	  *          ------------------------
	  *              0        match
	  *              1        not
	</pre>
	  **/
	  static public double[] predict(String[] as) {
	    int j, a;
	    Object v;
	    Object[] attr = new Object[as.length];

	    for (j = 0; j < real_attr.length; j++) {
	      a = real_attr[j];
	      try{ 
	        attr[a] = (as[a] == null || as[a].trim().equals("")
	                   ? null
	                   : (new Double(as[a])));
	      }
	      catch (NumberFormatException e) {
	        throw new IllegalArgumentException
	             ("Expected attribute " + a + " to contain a String parsable as a double");
	      }
	    }
	    for (j = 0; j < text_attr.length; j++) {
	      a = text_attr[j];
	      attr[a] = as[a];
	    }
	    for (j = 0; j < disc_attr.length; j++) {
	      String s = null;
	      a = disc_attr[j];
	      if (as[a] == null || (s = as[a].trim()).equals(""))
	        attr[a] = null;
	      else if ((v = disc_val_map[j].get(s)) == null) {
	        throw new IllegalArgumentException
	             ("Illegal value for attribute " + a + ":" + s);
	      } else
	        attr[a] = ((Integer) v);
	    }

	    return predict(attr);
	  }

	  static private double[] predict_int() {
	    reset_pred();
	    add_pred(   /* R */
	               0.8843506915563158);
	    if (defined_attr(4)) {  /* R.0 */
	      if (double_attr(4) <= 51.5) {
	        add_pred(   /* R.0:0 */
	                   0.516674450057519);
	        if (defined_attr(4)) {  /* R.0:0.0 */
	          if (double_attr(4) <= 6.5) {
	            add_pred(   /* R.0:0.0:0 */
	                       0.21748188492889264);
	          } else {
	            add_pred(   /* R.0:0.0:1 */
	                       -0.5614551882458849);
	            if (defined_attr(6)) {  /* R.0:0.0:1.0 */
	              if (double_attr(6) <= 0.148875) {
	                add_pred(   /* R.0:0.0:1.0:0 */
	                           -0.3748094292290468);
	              } else {
	                add_pred(   /* R.0:0.0:1.0:1 */
	                           0.2353885403406406);
	              }
	            }
	            if (defined_attr(5)) {  /* R.0:0.0:1.1 */
	              if (double_attr(5) <= 0.08712905452035886) {
	                add_pred(   /* R.0:0.0:1.1:0 */
	                           0.06413233762252243);
	              } else {
	                add_pred(   /* R.0:0.0:1.1:1 */
	                           -1.025454354258474);
	              }
	            }
	          }
	        }
	      } else {
	        add_pred(   /* R.0:1 */
	                   -2.0251807134217215);
	        if (defined_attr(4)) {  /* R.0:1.0 */
	          if (double_attr(4) <= 300.5) {
	            add_pred(   /* R.0:1.0:0 */
	                       0.3593971489833625);
	          } else {
	            add_pred(   /* R.0:1.0:1 */
	                       -3.8286883346401193);
	          }
	        }
	        if (defined_attr(4)) {  /* R.0:1.1 */
	          if (double_attr(4) <= 96.5) {
	            add_pred(   /* R.0:1.1:0 */
	                       0.7632873608070706);
	          } else {
	            add_pred(   /* R.0:1.1:1 */
	                       -0.19612995149509724);
	          }
	        }
	        if (defined_attr(5)) {  /* R.0:1.2 */
	          if (double_attr(5) <= 0.24860317757592784) {
	            add_pred(   /* R.0:1.2:0 */
	                       0.1938673152419511);
	          } else {
	            add_pred(   /* R.0:1.2:1 */
	                       -2.7367507901681956);
	          }
	        }
	      }
	    }
	    if (defined_attr(1)) {  /* R.1 */
	      if (attr_contains_token(1, 0)) {
	        add_pred(   /* R.1:0 */
	                   0.7529764062212984);
	        if (defined_attr(2)) {  /* R.1:0.0 */
	          if (attr_contains_token(2, 0)) {
	            add_pred(   /* R.1:0.0:0 */
	                       -0.7055018958070481);
	            if (defined_attr(5)) {  /* R.1:0.0:0.0 */
	              if (double_attr(5) <= 0.09548275590421118) {
	                add_pred(   /* R.1:0.0:0.0:0 */
	                           0.061594737238787924);
	              } else {
	                add_pred(   /* R.1:0.0:0.0:1 */
	                           -1.3135933381216875);
	              }
	            }
	            if (defined_attr(7)) {  /* R.1:0.0:0.1 */
	              if (double_attr(7) <= 2.5) {
	                add_pred(   /* R.1:0.0:0.1:0 */
	                           0.04378763355334221);
	                if (defined_attr(9)) {  /* R.1:0.0:0.1:0.0 */
	                  if (int_attr(9) == 1) {
	                    add_pred(   /* R.1:0.0:0.1:0.0:0 */
	                               -0.09169621698561214);
	                    if (defined_attr(7)) {  /* R.1:0.0:0.1:0.0:0.0 */
	                      if (double_attr(7) <= 1.5) {
	                        add_pred(   /* R.1:0.0:0.1:0.0:0.0:0 */
	                                   0.028812543372898763);
	                        if (defined_attr(3)) {  /* R.1:0.0:0.1:0.0:0.0:0.0 */
	                          if (double_attr(3) <= 12.00200957779031) {
	                            add_pred(   /* R.1:0.0:0.1:0.0:0.0:0.0:0 */
	                                       0.07314308629796666);
	                          } else {
	                            add_pred(   /* R.1:0.0:0.1:0.0:0.0:0.0:1 */
	                                       -0.38656551867307815);
	                          }
	                        }
	                      } else {
	                        add_pred(   /* R.1:0.0:0.1:0.0:0.0:1 */
	                                   -1.4476605776723268);
	                      }
	                    }
	                  } else {
	                    add_pred(   /* R.1:0.0:0.1:0.0:1 */
	                               0.35932550896323423);
	                  }
	                }
	              } else {
	                add_pred(   /* R.1:0.0:0.1:1 */
	                           -1.2556741045497761);
	              }
	            }
	          } else {
	            add_pred(   /* R.1:0.0:1 */
	                       8.61912257983138);
	          }
	        }
	      } else {
	        add_pred(   /* R.1:1 */
	                   -0.7712078445393644);
	        if (defined_attr(1)) {  /* R.1:1.0 */
	          if (attr_contains_token(1, 1)) {
	            add_pred(   /* R.1:1.0:0 */
	                       5.047897302569438);
	          } else {
	            add_pred(   /* R.1:1.0:1 */
	                       -0.19855682336980526);
	            if (defined_attr(1)) {  /* R.1:1.0:1.0 */
	              if (attr_contains_token(1, 2)) {
	                add_pred(   /* R.1:1.0:1.0:0 */
	                           1.5816896249348764);
	                if (defined_attr(2)) {  /* R.1:1.0:1.0:0.0 */
	                  if (attr_contains_token(2, 2)) {
	                    add_pred(   /* R.1:1.0:1.0:0.0:0 */
	                               -1.7181880310830782);
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:0.0:1 */
	                               1.1424866822690365);
	                    if (defined_attr(2)) {  /* R.1:1.0:1.0:0.0:1.0 */
	                      if (attr_contains_token(2, 3)) {
	                        add_pred(   /* R.1:1.0:1.0:0.0:1.0:0 */
	                                   -2.1052280127437863);
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:0.0:1.0:1 */
	                                   3.4835488837768853);
	                      }
	                    }
	                  }
	                }
	                if (defined_attr(9)) {  /* R.1:1.0:1.0:0.1 */
	                  if (int_attr(9) == 1) {
	                    add_pred(   /* R.1:1.0:1.0:0.1:0 */
	                               -0.942990329958424);
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:0.1:1 */
	                               0.1268186710284899);
	                  }
	                }
	              } else {
	                add_pred(   /* R.1:1.0:1.0:1 */
	                           -0.35522146000204746);
	                if (defined_attr(3)) {  /* R.1:1.0:1.0:1.0 */
	                  if (double_attr(3) <= 5.507574927567912) {
	                    add_pred(   /* R.1:1.0:1.0:1.0:0 */
	                               -2.2995781153354202);
	                    if (defined_attr(3)) {  /* R.1:1.0:1.0:1.0:0.0 */
	                      if (double_attr(3) <= 4.404241019560707) {
	                        add_pred(   /* R.1:1.0:1.0:1.0:0.0:0 */
	                                   -0.7359122412958479);
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:1.0:0.0:1 */
	                                   0.4053334752334436);
	                        if (defined_attr(2)) {  /* R.1:1.0:1.0:1.0:0.0:1.0 */
	                          if (attr_contains_token(2, 4)) {
	                            add_pred(   /* R.1:1.0:1.0:1.0:0.0:1.0:0 */
	                                       -3.211040205109785);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.0:0.0:1.0:1 */
	                                       0.3074660114016015);
	                          }
	                        }
	                      }
	                    }
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:1.0:1 */
	                               0.48581322337241895);
	                    if (defined_attr(3)) {  /* R.1:1.0:1.0:1.0:1.0 */
	                      if (double_attr(3) <= 9.63060000649648) {
	                        add_pred(   /* R.1:1.0:1.0:1.0:1.0:0 */
	                                   -0.700867461988841);
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:1.0:1.0:1 */
	                                   0.011293482531927045);
	                        if (defined_attr(3)) {  /* R.1:1.0:1.0:1.0:1.0:1.0 */
	                          if (double_attr(3) <= 154.02140103820952) {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.0:1.0:0 */
	                                       0.006869183786975054);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.0:1.0:1 */
	                                       -2.664692681541004);
	                          }
	                        }
	                      }
	                    }
	                    if (defined_attr(4)) {  /* R.1:1.0:1.0:1.0:1.1 */
	                      if (double_attr(4) <= 25.5) {
	                        add_pred(   /* R.1:1.0:1.0:1.0:1.1:0 */
	                                   0.06419848774716144);
	                        if (defined_attr(5)) {  /* R.1:1.0:1.0:1.0:1.1:0.0 */
	                          if (double_attr(5) <= 0.01500959219951775) {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.0:0 */
	                                       -0.08916613765371109);
	                            if (defined_attr(4)) {  /* R.1:1.0:1.0:1.0:1.1:0.0:0.0 */
	                              if (double_attr(4) <= 7.5) {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.0:0.0:0 */
	                                           0.03719763669002538);
	                              } else {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.0:0.0:1 */
	                                           -3.684774655352796);
	                              }
	                            }
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.0:1 */
	                                       0.7047353932862784);
	                          }
	                        }
	                        if (defined_attr(7)) {  /* R.1:1.0:1.0:1.0:1.1:0.1 */
	                          if (double_attr(7) <= 1.5) {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.1:0 */
	                                       0.2049631387962801);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.1:1 */
	                                       -0.20844361070254472);
	                            if (defined_attr(3)) {  /* R.1:1.0:1.0:1.0:1.1:0.1:1.0 */
	                              if (double_attr(3) <= 26.77082234797546) {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.1:1.0:0 */
	                                           -0.37478355753538867);
	                              } else {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:0.1:1.0:1 */
	                                           0.45499056200593785);
	                              }
	                            }
	                          }
	                        }
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:1.0:1.1:1 */
	                                   -0.5756090154311378);
	                        if (defined_attr(5)) {  /* R.1:1.0:1.0:1.0:1.1:1.0 */
	                          if (double_attr(5) <= 0.0487758945386064) {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:1.0:0 */
	                                       -3.7188445519551294);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.0:1.1:1.0:1 */
	                                       0.3230325603221959);
	                            if (defined_attr(4)) {  /* R.1:1.0:1.0:1.0:1.1:1.0:1.0 */
	                              if (double_attr(4) <= 84.5) {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:1.0:1.0:0 */
	                                           0.4012407307146081);
	                              } else {
	                                add_pred(   /* R.1:1.0:1.0:1.0:1.1:1.0:1.0:1 */
	                                           -1.0633778579923576);
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	                if (defined_attr(2)) {  /* R.1:1.0:1.0:1.1 */
	                  if (attr_contains_token(2, 5)) {
	                    add_pred(   /* R.1:1.0:1.0:1.1:0 */
	                               -0.5649021007560221);
	                    if (defined_attr(7)) {  /* R.1:1.0:1.0:1.1:0.0 */
	                      if (double_attr(7) <= 0.5) {
	                        add_pred(   /* R.1:1.0:1.0:1.1:0.0:0 */
	                                   -0.41469428706966277);
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:1.1:0.0:1 */
	                                   0.07274294433442692);
	                      }
	                    }
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:1.1:1 */
	                               0.7160529005154388);
	                    if (defined_attr(2)) {  /* R.1:1.0:1.0:1.1:1.0 */
	                      if (attr_contains_token(2, 6)) {
	                        add_pred(   /* R.1:1.0:1.0:1.1:1.0:0 */
	                                   -1.5257604198674357);
	                      } else {
	                        add_pred(   /* R.1:1.0:1.0:1.1:1.0:1 */
	                                   0.31674218036122637);
	                        if (defined_attr(2)) {  /* R.1:1.0:1.0:1.1:1.0:1.0 */
	                          if (attr_contains_token(2, 7)) {
	                            add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.0:0 */
	                                       -0.8987427971530296);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.0:1 */
	                                       2.3624000063171637);
	                            if (defined_attr(1)) {  /* R.1:1.0:1.0:1.1:1.0:1.0:1.0 */
	                              if (attr_contains_token(1, 5)) {
	                                add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.0:1.0:0 */
	                                           1.7461401280661024);
	                              } else {
	                                add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.0:1.0:1 */
	                                           -2.7806670117124725);
	                              }
	                            }
	                          }
	                        }
	                        if (defined_attr(3)) {  /* R.1:1.0:1.0:1.1:1.0:1.1 */
	                          if (double_attr(3) <= 29.73711226870263) {
	                            add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.1:0 */
	                                       -0.10514070597263198);
	                          } else {
	                            add_pred(   /* R.1:1.0:1.0:1.1:1.0:1.1:1 */
	                                       1.2043043554430521);
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	                if (defined_attr(1)) {  /* R.1:1.0:1.0:1.2 */
	                  if (attr_contains_token(1, 5)) {
	                    add_pred(   /* R.1:1.0:1.0:1.2:0 */
	                               0.0791903059156763);
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:1.2:1 */
	                               -4.654179825289178);
	                  }
	                }
	                if (defined_attr(0)) {  /* R.1:1.0:1.0:1.3 */
	                  if (int_attr(0) == 2) {
	                    add_pred(   /* R.1:1.0:1.0:1.3:0 */
	                               0.11926336356698827);
	                  } else {
	                    add_pred(   /* R.1:1.0:1.0:1.3:1 */
	                               -4.376103061445554);
	                  }
	                }
	              }
	            }
	          }
	        }
	        if (defined_attr(9)) {  /* R.1:1.1 */
	          if (int_attr(9) == 0) {
	            add_pred(   /* R.1:1.1:0 */
	                       -0.4006703395220888);
	          } else {
	            add_pred(   /* R.1:1.1:1 */
	                       0.6354064629177384);
	          }
	        }
	      }
	    }
	    if (defined_attr(3)) {  /* R.2 */
	      if (double_attr(3) <= 1.4898712409746429) {
	        add_pred(   /* R.2:0 */
	                   -1.7619737253294527);
	        if (defined_attr(3)) {  /* R.2:0.0 */
	          if (double_attr(3) <= 1.2178959133754734) {
	            add_pred(   /* R.2:0.0:0 */
	                       -0.3461358150097219);
	          } else {
	            add_pred(   /* R.2:0.0:1 */
	                       0.6255005976208058);
	          }
	        }
	      } else {
	        add_pred(   /* R.2:1 */
	                   0.09231067100284097);
	        if (defined_attr(3)) {  /* R.2:1.0 */
	          if (double_attr(3) <= 2.7552658129179446) {
	            add_pred(   /* R.2:1.0:0 */
	                       -0.45721936024792675);
	          } else {
	            add_pred(   /* R.2:1.0:1 */
	                       0.055913544516798155);
	            if (defined_attr(3)) {  /* R.2:1.0:1.0 */
	              if (double_attr(3) <= 2.990852863966918) {
	                add_pred(   /* R.2:1.0:1.0:0 */
	                           0.6489474174194695);
	              } else {
	                add_pred(   /* R.2:1.0:1.0:1 */
	                           -0.013376160286982663);
	                if (defined_attr(0)) {  /* R.2:1.0:1.0:1.0 */
	                  if (int_attr(0) == 1) {
	                    add_pred(   /* R.2:1.0:1.0:1.0:0 */
	                               0.37270810381534847);
	                  } else {
	                    add_pred(   /* R.2:1.0:1.0:1.0:1 */
	                               -0.02218454461224768);
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    if (defined_attr(8)) {  /* R.3 */
	      if (double_attr(8) <= 0.5) {
	        add_pred(   /* R.3:0 */
	                   0.050917614380511726);
	      } else {
	        add_pred(   /* R.3:1 */
	                   -0.7951892827598324);
	      }
	    }
	    if (defined_attr(7)) {  /* R.4 */
	      if (double_attr(7) <= 0.5) {
	        add_pred(   /* R.4:0 */
	                   -0.24590445682035608);
	        if (defined_attr(0)) {  /* R.4:0.0 */
	          if (int_attr(0) == 2) {
	            add_pred(   /* R.4:0.0:0 */
	                       0.04436349781062971);
	          } else {
	            add_pred(   /* R.4:0.0:1 */
	                       -0.6451217498081729);
	          }
	        }
	        if (defined_attr(3)) {  /* R.4:0.1 */
	          if (double_attr(3) <= 3.928275147983138) {
	            add_pred(   /* R.4:0.1:0 */
	                       -0.22510741400592474);
	          } else {
	            add_pred(   /* R.4:0.1:1 */
	                       0.1240243441642348);
	          }
	        }
	      } else {
	        add_pred(   /* R.4:1 */
	                   0.1321047281630284);
	      }
	    }

	    return finalize_pred();
	  }
	  static private String[] keys = {
	             "6a",
	             "7",
	             "2a",
	             "2b",
	             "None",
	             "1a1",
	             "1a",
	             "1a2",
	  };
	  static private final int num_keys = 8;
	  static private boolean[][] tokens = new boolean[3][];
	  static private int text_attr[] = {1,2,  };
	  static private final int num_text_attr = 2;
	  static private boolean[][][] text_patterns = {
	    {
	      {true,false,true,},
	      {false,false,},
	      {false,false,},
	      {false,},
	    },
	    {
	      {true,false,},
	      {true,false,true,},
	      {true,false,false,},
	      {false,false,},
	      {false,false,},
	      {false,false,},
	      {false,false,false,false,},
	    },
	  };
	  static private int real_attr[] = {3,4,5,6,7,8,  };
	  static private int disc_attr[] = {0,9,  };
	  static private Object[] attr;
	  static private Map hash = null;
	  static private Map[] disc_val_map = null;
	  static private String[][] disc_attr_vals = {
	    {
	      "male",
	      "female",
	      "unsure",
	    },
	    {
	      "unknown",
	      "small",
	      "large",
	    },
	  };

	  static {
	    disc_val_map = new Map[disc_attr.length];
	    for (int i = 0; i < disc_attr.length; i++) {
	      disc_val_map[i] = new TreeMap();
	      for (int j = 0; j < disc_attr_vals[i].length; j++)
	        disc_val_map[i].put(disc_attr_vals[i][j], new Integer(j));
	    }
	  }

	  static {
	    if (hash == null) {
	      hash = new HashMap();
	      for (int i = 0; i < num_keys; i++)
	        hash.put(keys[i], new Integer(i));
	    }
	  }

	  static{
	    for (int i = 0; i < num_text_attr; i++)
	      tokens[text_attr[i]] = new boolean[num_keys];
	  }

	  static private boolean defined_attr(int i) {
	    return (attr[i] != null);
	  }

	  static private double double_attr(int i) {
	    double r;
	    try {
	      r = ((Double) attr[i]).doubleValue();
	    }
	    catch (ClassCastException e) {
	      throw new IllegalArgumentException
	        ("Expected attribute " + i + " to be of type Double");
	    }
	    return r;
	  }

	  static private int int_attr(int i) {
	    int r;
	    try {
	      r = ((Integer) attr[i]).intValue();
	    }
	    catch (ClassCastException e) {
	      throw new IllegalArgumentException
	        ("Expected attribute " + i + " to be of type Integer");
	    }
	    return r;
	  }

	  static private boolean attr_contains_token(int i, int k) {
	    return tokens[i][k];
	  }

	  static private int cur_word = 0;
	  static private String[] words = null;
	  static private boolean[] pattern = null;
	  static private String prepend = "";
	  static private final String[] prependChar = {"0", "1"};

	  static private void setPattern(String[] m_w, boolean[] pat) {
	    words = m_w;
	    pattern = pat;
	    cur_word = 0;
	    prepend = "";
	    for (int i = 0; i < pattern.length; i++)
	      prepend += prependChar[pattern[i] ? 1 : 0];
	  }

	  static private boolean moreTokens() {
	    return (cur_word <= words.length - pattern.length);
	  }

	  static private String nextToken() {
	    if (!moreTokens())
	      throw new NoSuchElementException();
	    String r = prepend;
	    for (int i = 0; i < pattern.length; i++) {
	      if (pattern[i])
	        r += " " + words[cur_word + i];
	    }
	    cur_word++;
	    return r;
	  }

	  static private double p;
	  static private void reset_pred() { p = 0.0; }
	  static private void add_pred(double x) { p += x; }
	  static private double[] finalize_pred() {
	    return new double[] {-p, p};
	  }
	//------------------------- start cut here to make stand alone -----------
	  static private jboost.examples.Example ex;

	  /**
	     The main reads examples from standard input.  The examples must
	     have the same format as used during training.  After each example
	     is read a vector of scores is output, one per class.
	  **/
	  static public void main(String[] argv) {
	    jboost.monitor.Monitor.logLevel = -1;

	    jboost.tokenizer.ExampleStream exStream = null;

	    try {
	      exStream =
	         new jboost.tokenizer.ExampleStream(
	          (new jboost.tokenizer.jboost_DataStream(false, savedSpec)));
	    }
	    catch (Exception e) {
	      System.err.println("Unable to parse spec file.");
	      e.printStackTrace();
	      return;
	    }

	    attr = new Object[10];

	    jboost.examples.TextDescription.setTokenSet(keys);

	    int i, a, j, k;
	    double[] r;

	    while(true) {
	      try {
	        ex = exStream.getExample();
	      }
	      catch(jboost.tokenizer.ParseException e) {
	        System.err.println("Bad example encountered:");
	        System.err.println(e.getMessage());
	        continue;
	      }
	      if (ex == null)
	        break;
	      for (j = 0; j < real_attr.length; j++) {
	        a = real_attr[j];
	        jboost.examples.Attribute at = ex.getAttribute(a);
	        attr[a] = (at.isDefined()
	            ? (new Double(((jboost.examples.RealAttribute) at).getValue()))
	            : null);
	      }
	      for (j = 0; j < disc_attr.length; j++) {
	        a = disc_attr[j];
	        jboost.examples.Attribute at = ex.getAttribute(a);
	        attr[a] = (at.isDefined()
	            ? (new Integer(((jboost.examples.DiscreteAttribute) at).getValue()))
	            : null);
	      }
	      for (j = 0; j < text_attr.length; j++) {
	        a = text_attr[j];
	        jboost.examples.Attribute at = ex.getAttribute(a);
	        if (at.isDefined()) {
	          attr[a] = "";
	          int[] set = ((jboost.examples.SetAttribute) ex.getAttribute(a)).getList();

	          Arrays.fill(tokens[a], false);
	          for (k = 0; k < set.length; k++) {
	            tokens[a][set[k]] = true;
	          }
	        } else
	          attr[a] = null;
	      }

	      r = predict_int();
	      for(j = 0; j < r.length; j++)
	        System.out.print(r[j] + " ");
	      System.out.println();
	    }
	  }

	  private static final String savedSpec = " exampleTerminator=;\r\n attributeTerminator=,\r\n maxBadExa=0 \r\n sex              (male, female, unsure)\r\n locationCodeOne     text\r\n locationCodeTwo     text\r\n i3s               number\r\n grothPoints     number\r\n grothFractionMatchedTriangles     number\r\n grothLogMStdDev     number\r\n timeDiffYears     number\r\n numCommonKeywords number\r\n sizeDiff     (unknown, small, large)\r\n labels           ( match, not)\r\n weight number\r\n";
	//--------------------------- end cut ------------------------------------

	}



